#include <iostream>
#include <cstdlib>
#include <Windows.h>
#include <TlHelp32.h>
#include <vector>
#include <string>
#include <ctime>

bool DetectVirtualEnvironmentProcess() {
    // List of common virtual environment process names
    std::vector<std::wstring> virtualProcesses = {
        L"VMwareService.exe",
        L"VMwareTray.exe", 
        L"TPAutoConnSvc.exe",
        L"VMtoolsd.exe",
        L"VMwareuser.exe",
        // VirtualBox specific processes
        L"VBoxService.exe",
        L"VBoxTray.exe"
    };

    // Create snapshot of current processes
    HANDLE hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    if (hProcessSnap == INVALID_HANDLE_VALUE) {
        return false;
    }

    PROCESSENTRY32W pe32;
    pe32.dwSize = sizeof(PROCESSENTRY32W);

    // Get first process
    if (!Process32FirstW(hProcessSnap, &pe32)) {
        CloseHandle(hProcessSnap);
        return false;
    }

    do {
        for (const auto& virtualProcess : virtualProcesses) {
            if (_wcsicmp(pe32.szExeFile, virtualProcess.c_str()) == 0) {
                std::wcout << L"Virtual environment process detected: " << pe32.szExeFile << std::endl;
                CloseHandle(hProcessSnap);
                return true;
            }
        }
    } while (Process32NextW(hProcessSnap, &pe32));

    CloseHandle(hProcessSnap);
    return false;
}

void MalwareEvasionTechniques() {
    // Initialize random number generator
    srand(static_cast<unsigned>(time(NULL)));

    // 1. Allocate random garbage values in memory
    char* garbage = (char*)malloc(10);
    for (int i = 0; i < 10; i++) {
        garbage[i] = rand() % 256;
    }

    // 2. No-op loops
    for (int i = 0; i < 1000; i++) {
        volatile int no_op = i * 2;
    }

    // 3. Random behavior simulation
    if (rand() % 2) {
        std::cout << "Random condition met.\n";
    } else {
        std::cout << "Random condition not met.\n";
    }

    // 4. Dynamic function call
    int (*function_pointer)(const char*, ...) = printf;
    function_pointer("Dynamically called function.\n");

    // 5. Simple computation
    int a = 5, b = 10, c = a + b;
    std::cout << "The result is: " << c << std::endl;

    // 6. Encoded message obfuscation
    char encoded_message[] = {72, 101, 108, 108, 111, 33}; // "Hello!" ASCII
    for (size_t i = 0; i < sizeof(encoded_message); i++) {
        encoded_message[i] ^= 0xFF;
    }

    // Decode and print message
    for (size_t i = 0; i < sizeof(encoded_message); i++) {
        encoded_message[i] ^= 0xFF;
        putchar(encoded_message[i]);
    }
    putchar('\n');

    // Free allocated memory
    free(garbage);
}

int main() {
    std::cout << "Hello friend." << std::endl;
    
    if (DetectVirtualEnvironmentProcess()) {
        std::cout << "Running in a virtual environment!" << std::endl;
    } else {
        std::cout << "No virtual environment detected." << std::endl;
    }

    MalwareEvasionTechniques();

    system("pause");
    return 0;
}
// This code is a simple demonstration of some malware evasion techniques and virtual environment detection.
// It is not intended for malicious use and should only be used for educational purposes.